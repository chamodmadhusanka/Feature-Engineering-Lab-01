# -*- coding: utf-8 -*-
"""ML_Lab_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nSicwi5-kthsPuWaZA9i0yjVKhqD2SH3
"""

import pandas as pd

train_data = pd.read_csv("/content/drive/MyDrive/ML_Lab1/train.csv")
valid_data = pd.read_csv("/content/drive/MyDrive/ML_Lab1/valid.csv")

"""To check first 5 rows of data in train_data"""

train_data.head()

"""To check first 5 rows of data in valid_data"""

valid_data.head()

labels = ['label_1','label_2','label_3','label_4']

train_data['label_1'].value_counts()

train_data['label_2'].value_counts()

train_data['label_3'].value_counts()

train_data['label_4'].value_counts()

train_data.info()

train_data.describe()

from sklearn.preprocessing import RobustScaler

features = train_data.columns.values.tolist()[:-4]

scaler = RobustScaler()

X_train = {}
y_train = {}
X_valid = {}
y_valid = {}

for label in labels:

  if label == 'label_2':
    train_df = train_data[train_data['label_2'].notna()]
    valid_df = valid_data[valid_data['label_2'].notna()]
  else:
    train_df = train_data
    valid_df = valid_data

  X_train[label] = pd.DataFrame(scaler.fit_transform(train_df.drop(labels, axis=1)), columns = features)
  X_valid[label] = pd.DataFrame(scaler.transform(valid_df.drop(labels, axis=1)), columns = features)
  y_train[label] = train_df[label]
  y_valid[label] = valid_df[label]

y_train['label_2']

from sklearn import svm

clf = svm.SVC()
clf.fit(X_train['label_1'], y_train['label_1'])

from sklearn import metrics

prediction_1 = clf.predict(X_valid['label_1'])

print(metrics.confusion_matrix(y_valid['label_1'], prediction_1))
print(metrics.accuracy_score(y_valid['label_1'], prediction_1))
print(metrics.precision_score(y_valid['label_1'], prediction_1, average="weighted"))
print(metrics.recall_score(y_valid['label_1'], prediction_1, average="weighted"))

from sklearn.feature_selection import SelectKBest, f_classif

selector_1 = SelectKBest(f_classif, k = 200)
X_1 = selector_1.fit_transform(X_train['label_1'], y_train['label_1'])

clf = svm.SVC()
clf.fit(X_1, y_train['label_1'])
prediction_1 = clf.predict(selector_1.transform(X_valid['label_1']))

print(metrics.confusion_matrix(y_valid['label_1'], prediction_1))
print(metrics.accuracy_score(y_valid['label_1'], prediction_1))
print(metrics.precision_score(y_valid['label_1'], prediction_1, average="weighted"))
print(metrics.recall_score(y_valid['label_1'], prediction_1, average="weighted"))

from sklearn.svm import LinearSVC
from sklearn.feature_selection import SelectFromModel

linear_svc = LinearSVC(C=0.01, penalty="l1", dual=False).fit(X_train['label_1'], y_train['label_1'])
model = SelectFromModel(linear_svc, prefit=True)
X_2 = model.transform(X_train['label_1'])

clf = svm.SVC()
clf.fit(X_2, y_train['label_1'])
prediction_2 = clf.predict(model.transform(X_valid['label_1']))

print(metrics.confusion_matrix(y_valid['label_1'], prediction_2))
print(metrics.accuracy_score(y_valid['label_1'], prediction_2))
print(metrics.precision_score(y_valid['label_1'], prediction_2, average="weighted"))
print(metrics.recall_score(y_valid['label_1'], prediction_2, average="weighted"))

from sklearn.decomposition import PCA

pca = PCA(n_components=0.99,svd_solver='full')
pca.fit(X_train['label_1'])

X_train_trans = pd.DataFrame(pca.transform(X_train['label_1']))
X_valid_trans = pd.DataFrame(pca.transform(X_valid['label_1']))

clf = svm.SVC()
clf.fit(X_train_trans, y_train['label_1'])

prediction_3 = clf.predict(X_valid_trans)

print(metrics.confusion_matrix(y_valid['label_1'], prediction_3))
print(metrics.accuracy_score(y_valid['label_1'], prediction_3))
print(metrics.precision_score(y_valid['label_1'], prediction_3, average="weighted"))
print(metrics.recall_score(y_valid['label_1'], prediction_3, average="weighted"))

print(X_1.shape, X_2.shape, X_train_trans.shape, X_valid_trans.shape)

print(X_train_trans.shape[1])

test_data = pd.read_csv('/content/drive/MyDrive/ML_Lab1/test.csv')

test_data

X_test = {}

test_df = test_data

for label in labels:
  X_test[label] = pd.DataFrame(scaler.fit_transform(test_df.drop(labels, axis=1)), columns = features)

from sklearn import svm

clf = svm.SVC()
clf.fit(X_train['label_1'], y_train['label_1'])

prediction_1 = clf.predict(X_test['label_1'])

from sklearn.decomposition import PCA

pca = PCA(n_components=0.99,svd_solver='full')
pca.fit(X_train['label_1'])

X_t_trans = pd.DataFrame(pca.transform(X_train['label_1']))
X_v_trans = pd.DataFrame(pca.transform(X_test['label_1']))

clf = svm.SVC()
clf.fit(X_t_trans, y_train['label_1'])

prediction_3 = clf.predict(X_v_trans)

df = pd.DataFrame({'Predicted labels before feature engineering':prediction_1, 'Predicted labels after feature engineering':prediction_3, 'No. of new features':X_train_trans.shape[1]})

df

for i in range (X_train_trans.shape[1]):
  df['new_feature_'+str(i+1)] = X_train_trans[i]

df

df.to_csv('/content/drive/MyDrive/ML_Lab1/label_1.csv', index=False)

"""Label_2 Starts from here"""

from sklearn import svm

clf = svm.SVC()
clf.fit(X_train['label_2'], y_train['label_2'])

from sklearn import metrics

prediction_1 = clf.predict(X_valid['label_2'])

print(metrics.confusion_matrix(y_valid['label_2'], prediction_1))
print(metrics.accuracy_score(y_valid['label_2'], prediction_1))
print(metrics.precision_score(y_valid['label_2'], prediction_1, average="weighted"))
print(metrics.recall_score(y_valid['label_2'], prediction_1, average="weighted"))

from sklearn.feature_selection import SelectKBest, f_classif

selector_1 = SelectKBest(f_classif, k = 200)
X_1 = selector_1.fit_transform(X_train['label_2'], y_train['label_2'])

clf = svm.SVC()
clf.fit(X_1, y_train['label_2'])
prediction_1 = clf.predict(selector_1.transform(X_valid['label_2']))

print(metrics.confusion_matrix(y_valid['label_2'], prediction_1))
print(metrics.accuracy_score(y_valid['label_2'], prediction_1))
print(metrics.precision_score(y_valid['label_2'], prediction_1, average="weighted"))
print(metrics.recall_score(y_valid['label_2'], prediction_1, average="weighted"))

from sklearn.svm import LinearSVC
from sklearn.feature_selection import SelectFromModel

linear_svc = LinearSVC(C=0.01, penalty="l1", dual=False).fit(X_train['label_2'], y_train['label_2'])
model = SelectFromModel(linear_svc, prefit=True)
X_2 = model.transform(X_train['label_2'])

clf = svm.SVC()
clf.fit(X_2, y_train['label_2'])
prediction_2 = clf.predict(model.transform(X_valid['label_2']))

print(metrics.confusion_matrix(y_valid['label_2'], prediction_2))
print(metrics.accuracy_score(y_valid['label_2'], prediction_2))
print(metrics.precision_score(y_valid['label_2'], prediction_2, average="weighted"))
print(metrics.recall_score(y_valid['label_2'], prediction_2, average="weighted"))

from sklearn.decomposition import PCA

pca = PCA(n_components=0.99,svd_solver='full')
pca.fit(X_train['label_2'])

X_train_trans = pd.DataFrame(pca.transform(X_train['label_2']))
X_valid_trans = pd.DataFrame(pca.transform(X_valid['label_2']))

clf = svm.SVC()
clf.fit(X_train_trans, y_train['label_2'])

prediction_3 = clf.predict(X_valid_trans)

print(metrics.confusion_matrix(y_valid['label_2'], prediction_3))
print(metrics.accuracy_score(y_valid['label_2'], prediction_3))
print(metrics.precision_score(y_valid['label_2'], prediction_3, average="weighted"))
print(metrics.recall_score(y_valid['label_2'], prediction_3, average="weighted"))

from sklearn import svm

clf = svm.SVC()
clf.fit(X_train['label_2'], y_train['label_2'])

prediction_1 = clf.predict(X_test['label_2'])

from sklearn.decomposition import PCA

pca = PCA(n_components=0.99,svd_solver='full')
pca.fit(X_train['label_2'])

X_t_trans = pd.DataFrame(pca.transform(X_train['label_2']))
X_v_trans = pd.DataFrame(pca.transform(X_test['label_2']))

clf = svm.SVC()
clf.fit(X_t_trans, y_train['label_2'])

prediction_3 = clf.predict(X_v_trans)

df = pd.DataFrame({'Predicted labels before feature engineering':prediction_1, 'Predicted labels after feature engineering':prediction_3, 'No. of new features':X_train_trans.shape[1]})

df

for i in range (X_train_trans.shape[1]):
  df['new_feature_'+str(i+1)] = X_train_trans[i]

df

df.to_csv('/content/drive/MyDrive/ML_Lab1/label_2.csv', index=False)

"""Label 3 Starts from here"""

from sklearn import svm

clf = svm.SVC()
clf.fit(X_train['label_3'], y_train['label_3'])

from sklearn import metrics

prediction_1 = clf.predict(X_valid['label_3'])

print(metrics.confusion_matrix(y_valid['label_3'], prediction_1))
print(metrics.accuracy_score(y_valid['label_3'], prediction_1))
print(metrics.precision_score(y_valid['label_3'], prediction_1, average="weighted"))
print(metrics.recall_score(y_valid['label_3'], prediction_1, average="weighted"))

from sklearn.feature_selection import SelectKBest, f_classif

selector_1 = SelectKBest(f_classif, k = 200)
X_1 = selector_1.fit_transform(X_train['label_3'], y_train['label_3'])

clf = svm.SVC()
clf.fit(X_1, y_train['label_3'])
prediction_1 = clf.predict(selector_1.transform(X_valid['label_3']))

print(metrics.confusion_matrix(y_valid['label_3'], prediction_1))
print(metrics.accuracy_score(y_valid['label_3'], prediction_1))
print(metrics.precision_score(y_valid['label_3'], prediction_1, average="weighted"))
print(metrics.recall_score(y_valid['label_3'], prediction_1, average="weighted"))

from sklearn.svm import LinearSVC
from sklearn.feature_selection import SelectFromModel

linear_svc = LinearSVC(C=0.01, penalty="l1", dual=False).fit(X_train['label_3'], y_train['label_3'])
model = SelectFromModel(linear_svc, prefit=True)
X_2 = model.transform(X_train['label_3'])

clf = svm.SVC()
clf.fit(X_2, y_train['label_3'])
prediction_2 = clf.predict(model.transform(X_valid['label_3']))

print(metrics.confusion_matrix(y_valid['label_3'], prediction_2))
print(metrics.accuracy_score(y_valid['label_3'], prediction_2))
print(metrics.precision_score(y_valid['label_3'], prediction_2, average="weighted"))
print(metrics.recall_score(y_valid['label_3'], prediction_2, average="weighted"))

from sklearn.decomposition import PCA

pca = PCA(n_components=0.99,svd_solver='full')
pca.fit(X_train['label_3'])

X_train_trans = pd.DataFrame(pca.transform(X_train['label_3']))
X_valid_trans = pd.DataFrame(pca.transform(X_valid['label_3']))

clf = svm.SVC()
clf.fit(X_train_trans, y_train['label_3'])

prediction_3 = clf.predict(X_valid_trans)

print(metrics.confusion_matrix(y_valid['label_3'], prediction_3))
print(metrics.accuracy_score(y_valid['label_3'], prediction_3))
print(metrics.precision_score(y_valid['label_3'], prediction_3, average="weighted"))
print(metrics.recall_score(y_valid['label_3'], prediction_3, average="weighted"))

from sklearn import svm

clf = svm.SVC()
clf.fit(X_train['label_3'], y_train['label_3'])

prediction_1 = clf.predict(X_test['label_3'])

from sklearn.decomposition import PCA

pca = PCA(n_components=0.99,svd_solver='full')
pca.fit(X_train['label_3'])

X_t_trans = pd.DataFrame(pca.transform(X_train['label_3']))
X_v_trans = pd.DataFrame(pca.transform(X_test['label_3']))

clf = svm.SVC()
clf.fit(X_t_trans, y_train['label_3'])

prediction_3 = clf.predict(X_v_trans)

df = pd.DataFrame({'Predicted labels before feature engineering':prediction_1, 'Predicted labels after feature engineering':prediction_3, 'No. of new features':X_train_trans.shape[1]})

df

for i in range (X_train_trans.shape[1]):
  df['new_feature_'+str(i+1)] = X_train_trans[i]

df

df.to_csv('/content/drive/MyDrive/ML_Lab1/label_3.csv', index=False)

"""Label 4 Starts from here"""

from sklearn import svm

clf = svm.SVC()
clf.fit(X_train['label_4'], y_train['label_4'])

from sklearn import metrics

prediction_1 = clf.predict(X_valid['label_4'])

print(metrics.confusion_matrix(y_valid['label_4'], prediction_1))
print(metrics.accuracy_score(y_valid['label_4'], prediction_1))
print(metrics.precision_score(y_valid['label_4'], prediction_1, average="weighted"))
print(metrics.recall_score(y_valid['label_4'], prediction_1, average="weighted"))

from sklearn.feature_selection import SelectKBest, f_classif

selector_1 = SelectKBest(f_classif, k = 200)
X_1 = selector_1.fit_transform(X_train['label_4'], y_train['label_4'])

clf = svm.SVC()
clf.fit(X_1, y_train['label_4'])
prediction_1 = clf.predict(selector_1.transform(X_valid['label_4']))

print(metrics.confusion_matrix(y_valid['label_4'], prediction_1))
print(metrics.accuracy_score(y_valid['label_4'], prediction_1))
print(metrics.precision_score(y_valid['label_4'], prediction_1, average="weighted"))
print(metrics.recall_score(y_valid['label_4'], prediction_1, average="weighted"))

from sklearn.svm import LinearSVC
from sklearn.feature_selection import SelectFromModel

linear_svc = LinearSVC(C=0.01, penalty="l1", dual=False).fit(X_train['label_4'], y_train['label_4'])
model = SelectFromModel(linear_svc, prefit=True)
X_2 = model.transform(X_train['label_4'])

clf = svm.SVC()
clf.fit(X_2, y_train['label_4'])
prediction_2 = clf.predict(model.transform(X_valid['label_4']))

print(metrics.confusion_matrix(y_valid['label_4'], prediction_2))
print(metrics.accuracy_score(y_valid['label_4'], prediction_2))
print(metrics.precision_score(y_valid['label_4'], prediction_2, average="weighted"))
print(metrics.recall_score(y_valid['label_4'], prediction_2, average="weighted"))

from sklearn.decomposition import PCA

pca = PCA(n_components=0.99,svd_solver='full')
pca.fit(X_train['label_4'])

X_train_trans = pd.DataFrame(pca.transform(X_train['label_4']))
X_valid_trans = pd.DataFrame(pca.transform(X_valid['label_4']))

clf = svm.SVC()
clf.fit(X_train_trans, y_train['label_4'])

prediction_3 = clf.predict(X_valid_trans)

print(metrics.confusion_matrix(y_valid['label_4'], prediction_3))
print(metrics.accuracy_score(y_valid['label_4'], prediction_3))
print(metrics.precision_score(y_valid['label_4'], prediction_3, average="weighted"))
print(metrics.recall_score(y_valid['label_4'], prediction_3, average="weighted"))

from sklearn import svm

clf = svm.SVC()
clf.fit(X_train['label_4'], y_train['label_4'])

prediction_1 = clf.predict(X_test['label_4'])

from sklearn.decomposition import PCA

pca = PCA(n_components=0.99,svd_solver='full')
pca.fit(X_train['label_4'])

X_t_trans = pd.DataFrame(pca.transform(X_train['label_4']))
X_v_trans = pd.DataFrame(pca.transform(X_test['label_4']))

clf = svm.SVC()
clf.fit(X_t_trans, y_train['label_4'])

prediction_3 = clf.predict(X_v_trans)

df = pd.DataFrame({'Predicted labels before feature engineering':prediction_1, 'Predicted labels after feature engineering':prediction_3, 'No. of new features':X_train_trans.shape[1]})

df

for i in range (X_train_trans.shape[1]):
  df['new_feature_'+str(i+1)] = X_train_trans[i]

df

df.to_csv('/content/drive/MyDrive/ML_Lab1/label_4.csv', index=False)